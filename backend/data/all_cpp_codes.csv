code,category
"#include <iostream>

int main() {
    std::cout << ""Hello, World!"" << std::endl;
    return 0;
}",Basic
"// C++ program to demonstrate 
// working of auto keyword 
 
#include <bits/stdc++.h> 
using
namespace
std; 
 
// Driver Code 
int
main() 
{ 
 
    
// Variables 
    
auto
an_int = 26; 
    
auto
a_bool = 
false
; 
    
auto
a_float = 26.24; 
    
auto
ptr = &a_float; 
 
    
// Print typeid 
    
cout << 
typeid
(a_bool).name() << 
""\n""
; 
    
cout << 
typeid
(an_int).name() << 
""\n""
; 
    
return
0; 
}",Basic
"// C++ Program to implement 
// the Memory Management 
 
#include <cstring> 
#include <iostream> 
using
namespace
std; 
 
// Driver Code 
int
main() 
{ 
    
int
num = 5; 
    
float
* ptr; 
 
    
// Memory allocation of 
    
// num number of floats 
    
ptr = 
new
float
[num]; 
 
    
for
(
int
i = 0; i < num; ++i) { 
        
*(ptr + i) = i; 
    
} 
 
    
cout << 
""Display the GPA of students:""
<< endl; 
    
for
(
int
i = 0; i < num; ++i) { 
 
        
cout << 
""Student""
<< i + 1 << 
"": ""
<< *(ptr + i) 
             
<< endl; 
    
} 
 
    
// Ptr memory is released 
    
delete
[] ptr; 
 
    
return
0; 
}",Basic
"// C++ Program to implement 
// the working of Multi-threading 
 
#include <cstdlib> 
#include <iostream> 
#include <pthread.h> 
 
using
namespace
std; 
 
#define NUM_THREADS 5 
 
// Function to print Hello with 
// the thread id 
void
* PrintHello(
void
* threadid) 
{ 
    
// Thread ID 
    
long
tid; 
    
tid = (
long
)threadid; 
 
    
// Print the thread ID 
    
cout << 
""Hello World! Thread ID, ""
         
<< tid << endl; 
 
    
pthread_exit(NULL); 
} 
 
// Driver Code 
int
main() 
{ 
 
    
// Create thread 
    
pthread_t threads[NUM_THREADS]; 
    
int
rc; 
    
int
i; 
 
    
for
(i = 0; i < NUM_THREADS; i++) { 
 
        
cout << 
""main() : creating thread, ""
             
<< i << endl; 
 
        
rc = pthread_create(&threads[i], 
                            
NULL, 
                            
PrintHello, 
                            
(
void
*)&i); 
 
        
// If thread is not created 
        
if
(rc) { 
            
cout << 
""Error:unable to""
                 
<< 
"" create thread, ""
                 
<< rc << endl; 
 
            
exit
(-1); 
        
} 
    
} 
 
    
pthread_exit(NULL); 
} ",Basic
"// Using online ide of C++ 
#include <iostream>
using
namespace
std;
int
main()
{
    
cout << 
""Learning C++ at GeekforGeeks""
;
    
return
0;
}",Basic
"// Header file for input output functions
#include <iostream>
using namespace std;

// main() function: where the execution of
// C++ program begins
int main() {
  
    // This statement prints ""Hello World""
    cout << ""Hello World"";

    return 0;
}",Basic
"// C++ program to demonstrate the basic syntax
// Header File Library
#include <iostream>

// Standard Namespace
using namespace std;

// Main Function
int main()
{

    // Body of the Function

    // Declaration of Variable
    int num1 = 24;
    int num2 = 34;

    int result = num1 + num2;

    // Output
    cout << result << endl;

    // Return Statement
    return 0;
}",Basic
"#include <iostream>
using namespace std;

class Calculate{
    
      // Access Modifiers
    public:
          // data member
        int num1 = 50;
        int num2 = 30;
        
          // member function
        int addition() {
            int result = num1 + num2;
            cout << result << endl;
        }
};

int main() {
    
    // object declaration
    Calculate add;
      // member function calling
    add.addition();

    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {
  
    // A comment to provide information about below line
    cout << ""GFG!"";
  
    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {
  
    // Single line comment which will be ignored by the
    // compiler
    cout << ""GFG!"";
    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {
  
    /* Multi line comment which
       will be ignored by the compiler
    */
    cout << ""GFG!"";
    return 0;
}",Basic
"#include <iostream>
using namespace std;

// Here Car identifier is used to refer to below class
class Car {
    string Brand;
    string model;
    int year;
};

// getSum identifier is used to call the below
// function
void getSum(int a, int b) {
    int _sum = a + b;
    cout << ""The sum is: "" << _sum;
}

int main() {
  
    // Identifiers used as variable names
    int studentAge = 20;
    double accountBalance = 1000.50;
    string student_Name = ""Karan"";

    getSum(2, 10);

    return 0;
}",Basic
"#include <stdio.h>

// 'main' jest również identyfikatorem
// although it is predefined
int main() {
  
    // Example of a keyword: int
      // Here, age is identifier
    int age = 25;

    printf(""Age: %d\n"", age);

    // return is a keyword that exits function
    return 0; 
}",Basic
"#include <iostream>
using namespace std;

int main() {
    
      // A variable that may store the data of
      // int type (whole numbers)
    int var;
  
      // Assigning a whole number
      var = 100;
  
      // Printing the variable
      cout << var;
  
    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {

    // Defining and initializing a variable
      int age1 = 15;
  
      // Defining a variable
      int age2;
  
      // Initialize the variable
      age2 = 99;
  
      // Displaying variable
      cout << age1 << endl;
      cout << age2;
    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {
  
      // Creating three variables that store characters
      char a = 'A', b = 'B', c = 'C';
  
      // Update the value
      c = 'c';

    cout << a << "" "" << b << "" "" << c;
    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {

    // Declaring and defining a constant variable
    const int c = 24;

    cout << c;
    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {
    int var = 10;

    // Declaring a constant variable
    const int c = 24;

    // Trying to change the value constant c
    c = 0;

    cout << c;
    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {
  
    // Defining constant
    int constexpr hoursIn_day = 24;

    // Printing value
    cout << hoursIn_day;
    return 0;
}",Basic
"#include <iostream>
using namespace std;

// Using #define to create a macro
#define Side 5

int main()
{
    // Using constant
    double area = Side * Side;

    cout << area;
    return 0;
}",Basic
"#include <iostream>
using namespace std;

// Declaring first variable
int a = 10;

int main() {

      // Declaring second variable
      int b = 9;

      // Accessing a and b variable in their scope
    cout << a << "" "" << b;

    return 0;
}",Basic
"#include<iostream>
using namespace std;

// Global variable
int global = 5;

// Global variable accessed from within
// a function
void display() {
    cout << global << endl;
}

int main() {
    display();
    
    // Changing value of global from main
      // function before calling display()
    global = 10;
    display();
  
      return 0;
}",Basic
"#include<iostream>
using namespace std;

void func() {
  
    // This variable is local to function func() and
      // cannot be accessed outside this function
    int age = 18;
}

int main() {
  
      // Accessing variable from func() in main function
    cout << ""Age is: "" << age;
    
    return 0;
}",Basic
"#include<iostream>
using namespace std;

void func() {

    // This variable is local to function func() and
      // cannot be accessed outside this function
    int age = 18;
    cout << age;
}

int main() {
    cout << ""Age is: "";
    func();
    
    return 0;
}",Basic
"#include<iostream>
using namespace std;

// Global variable
int a = 5;

int main() {
  
    // Local variable with same name as that of
      // global variable
    int a = 100;
  
      // Accessing a
    cout << a;
  
      return 0;
}",Basic
"#include<iostream>
using namespace std;

// Global variable
int a = 5;

int main() {
  
    // Local variable with same name as that of
      // global variable
    int a = 100;
  
      // Accessing global a
    cout << ::a;
  
      return 0;
}",Basic
"#include <iostream>
using namespace std;

class A {
public:
  
      // Instance variable with instance scope i.e. accessible
      // in whole class
    int instanceVar;

    A(int val) {
        instanceVar = val;
    }

    void display() {
        cout << instanceVar << endl;
    }
};

int main() {
  
      // Creates a1 with instanceVar = 10
    A a1(1);
    a1.display();

      // Creates a2 with instanceVar = 20
    A a2(33);
    a2.display();

    return 0;
}",Basic
"#include <iostream>
using namespace std;

class A {
public:
  
      // Static variable with static scope i.e. accessible
      // in whole class
    static int staticVar;
};

int A::staticVar = 1;

int main() {
  
      // Access static variable
      cout << A::staticVar;

    return 0;
}",Basic
"#include <iostream>
using namespace std;

namespace N {
      
      // Variable with namespace scope
    int namespaceVar = 10;
}

int main() {
  
      // Access variable using namespace
    cout << N::namespaceVar;  

    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {

    // Declaring an auto variable
    int a = 32;
    float b = 3.2;
    string c = ""GeeksforGeeks"";

    // Printing the auto variables
    cout << a << "" \n"";
    cout << b << "" \n"";
      cout << c << "" \n"";

    return 0;
}",Basic
"// Defining a global variable with external linkage
int var = 10;",Basic
"#include <iostream>
using namespace std;

// Telling compiler that variable x is extern variable
// and has been defined elsewhere
extern int x;

int main() {
  
      // Printing the value of x
    cout << x;

    return 0;
}",Basic
"#include <iostream>
using namespace std;

// Function containing static variables
// memory is retained during execution
int func() {
  
      // Static variable
    static int count = 0;
    count++;
    return count;
}

int main() {
    cout << func() << ""\n"";
    cout << func();
    
    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {

    // Declaring a register variable
    register char b = 'G';

    // Printing the register variable 'b'
    cout << b;
  
    return 0;
}",Basic
"#include <iostream>
using namespace std;

class A {
public:
    int x;

    // Defining mutable variable y
    // now this can be modified
    mutable int y;

    A(): x(4), y(10) {}
};

int main() {
  
    // a is created as constant
    const A a;

    // Trying to change the value
    a.y = 200;
    cout << a.y;

    // Uncommenting below lines
    // will throw error
    /* a.x = 8;
    cout << a.x; */
  
    return 0;
}",Basic
"#include <iostream>
#include <mutex>
#include <thread>

using namespace std;

// Defining thread-local variable
thread_local int val = 10;

// Mutex for synchronization
mutex mtx;

int main() {
  
    // Created 3 threads
    // Modify value in thread 1
    thread th1([]() {
        val += 18;
        lock_guard<mutex> lock(mtx);
        cout << ""Thread 1 value: "" << val << '\n';
    });

    thread th2([]() {
      
        // Modify value in thread 2
        val += 7;
        lock_guard<mutex> lock(mtx);
        cout << ""Thread 2 value: "" << val << '\n';
    });

    thread th3([]() {
      
        // Modify value in thread 3
        val += 13;
        lock_guard<mutex> lock(mtx);
        cout << ""Thread 3 value: "" << val << '\n';
    });

    // Wait for all threads to finish
    th1.join();
    th2.join();
    th3.join();

    // Print the value of value in the main thread
    cout << ""Main thread value: "" << val << '\n';

    return 0;
}",Basic
"#include <bits/stdc++.h>
using namespace std;

void f() {
  
    // Static variable
    static int count = 0;

    // The value will be updated and carried over
      // to the next function call
    count++;
      cout << count << "" "";
}

int main() {
  
      // Calling function f() 5 times
    for (int i = 0; i < 5; i++)
        f();
  
    return 0;
}",Basic
"#include <iostream>
using namespace std;

class GfG {
public:
  
      // Static data member
    static int i;

    GfG(){
        // Do nothing
    };
};

int main() {
    GfG obj1;
    GfG obj2;
    obj1.i = 2;
    obj2.i = 3;

    // Prints value of i
    cout << obj1.i << "" "" << obj2.i;
}",Basic
"#include <iostream>
using namespace std;

class GfG {
public:
  
      // Static data member
    static int i;

    GfG(){
        // Do nothing
    };
};

// Static member inintialization
int GfG::i = 1;

int main() {
  
    // Prints value of i
    cout << GfG::i;
}",Basic
"#include <iostream>
using namespace std;

class GfG {
public:
  
    // Static member function
    static void printMsg() { cout << ""Welcome to GfG!""; }
};

int main() {
  
    // Invoking a static member function
    GfG::printMsg();
}",Basic
"#include <iostream>
using namespace std;

// Global static variable
static int count = 0;

void increment() {
    count++;
    cout << count << "" "";
}

int main() {
    increment();
    increment();
    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {
    int age = 19;
  
    // Check if age is greater than 18 fo
    // vote eligiblity
    if (age > 18) {
        cout << ""allowed to vote"";
    }
    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {
    int n = 5;

    // Using if-else to determine if the number is positive
    // or non positive
    if (n > 0) {
        cout << ""number is positive."";
    }
    else {
        cout << ""number is non-positive."";
    }
    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {
    int age = 18;

    // if this condition is true child is printed
    if (age < 13) {
        cout << ""child"";
    }
 
    // if above above if statement is not true then we check
    // this else if condition if it evalutes to true print
    // growing age
    else if (age >= 1 and age <= 18) {
        cout << ""Growing stage"";
    }

    // if none of above condition is true print adult
    else {
        cout << ""adult"";
    }
    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {
    int n = 44;
  
    // to check if n is positive
    if (n > 0) {

        // to check if the positive n is even or odd
        if (n % 2 == 0) {
            cout << ""positive and even number"";
        }
        else {
            cout << ""positive and odd number"";
        }
    }
    // to check if the n is 0
    else if (n == 0) {
        cout << ""the number is zero"";
    }
    // to check if the n is negative
    else {
        cout << ""the number is negative"";
    }
    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {
    char c = 'B';
    switch (c) {
        
    // if the input character is A then print GFG
    case 'A':
        cout << ""GFG"";
        break;

    // if the input character is B then print
    // GeeksforGeeks
    case 'B':
        cout << ""GeeksforGeeks"";
        break;
    default:
        
        // if the input character is invalid then print
        // invalid input
        cout << ""invalid input"";
    }
    return 0;
}",Basic
"#include <iostream>
using namespace std;

int main() {
    int num1 = 10, num2 = 40;
    int max;
  
    // if the condition is true then num1 will be printed
    // else num2 will printed
    max = (num1 > num2) ? num1 : num2;
    cout << max;
    return 0;
}",Basic
"// C++ program to use break statement to break the loop when
// i become 3

#include <iostream>
using namespace std;

int main()
{
    for (int i = 0; i < 5; i++) {
        // if i become 3 then break the loop and move to
        // next statement out of loop
        if (i == 3) {
            break;
        }
        cout << i << endl;
    }
    // next statements
    return 0;
}",Basic
"// C++ program to use continue statement to continue the
// loop when i become 3

#include <iostream>
using namespace std;

int main()
{
    for (int i = 0; i < 5; i++) {
        // if i become 3 then skip the rest body of loop and
        // move next iteration
        if (i == 3) {
            continue;
        }
        cout << i << endl;
    }
    return 0;
}",Basic
"// C++ program to demonstrate the use of goto statement

#include <iostream>
using namespace std;

int main()
{

    int age = 17;
    if (age < 18) {
        goto Noteligible;
    }
    else {
        cout << ""You can vote!"";
    }
Noteligible:
    cout << ""You are not eligible to vote!\n"";
    return 0;
}",Basic
"// C++ program to use return statement to return the sum
// calculated by a function

#include <iostream>
using namespace std;

// Function to add two numbers and returns the result
int add(int a, int b)
{
    int sum = a + b;
    return sum; // Return the sum to the calling code
}

int main()
{
    int res = add(3, 5);
    cout << ""The sum is: "" << res << endl;

    return 0;
}",Basic
"// C++ program to demonstrate the
// making of structure
#include <bits/stdc++.h>
using namespace std;

// Define structure
struct GFG {
    int G1;
    char G2;
    float G3;
};

// Driver Code
int main()
{
    // Declaring a Structure
    struct GFG Geek;
    Geek.G1 = 85;
    Geek.G2 = 'G';
    Geek.G3 = 989.45;
    cout << ""The value is : "" << Geek.G1 << endl;
    cout << ""The value is : "" << Geek.G2 << endl;
    cout << ""The value is : "" << Geek.G3 << endl;

    return 0;
}",Intermediate
"// C++ program to demonstrate the use
// of struct using typedef
#include <bits/stdc++.h>
using namespace std;

// Declaration of typedef
typedef struct GeekForGeeks {

    int G1;
    char G2;
    float G3;

} GFG;

// Driver Code
int main()
{
    GFG Geek;
    Geek.G1 = 85;
    Geek.G2 = 'G';
    Geek.G3 = 989.45;

    cout << ""The value is : "" << Geek.G1 << endl;

    cout << ""The value is : "" << Geek.G2 << endl;

    cout << ""The value is : "" << Geek.G3 << endl;

    return 0;
}",Intermediate
"// C++ program to illustrate the use
// of the unions
#include <iostream>
using namespace std;

// Defining a Union
union GFG {
    int Geek1;
    char Geek2;
    float Geek3;
};

// Driver Code
int main()
{
    // Initializing Union
    union GFG G1;

    G1.Geek1 = 34;

    // Printing values
    cout << ""The first value at ""
         << ""the allocated memory : "" << G1.Geek1 << endl;

    G1.Geek2 = 'G';

    cout << ""The next value stored ""
         << ""after removing the ""
         << ""previous value : "" << G1.Geek2 << endl;

    G1.Geek3 = 34.34;

    cout << ""The Final value value ""
         << ""at the same allocated ""
         << ""memory space : "" << G1.Geek3 << endl;
    return 0;
}",Intermediate
"// C++ program to illustrate the use
// of the Enums

#include <bits/stdc++.h>
using namespace std;

// Defining  an enum
enum GeeksforGeeks { Geek1, Geek2, Geek3 };

GeeksforGeeks G1 = Geek1;
GeeksforGeeks G2 = Geek2;
GeeksforGeeks G3 = Geek3;

// Driver Code
int main()
{
    cout << ""The numerical value ""
         << ""assigned to Geek1 : "" << G1 << endl;

    cout << ""The numerical value ""
         << ""assigned to Geek2 : "" << G2 << endl;

    cout << ""The numerical value ""
         << ""assigned to Geek3 : "" << G3 << endl;

    return 0;
}",Intermediate
"// In C++ We can Initialize the Variables with Declaration in Structure.

#include <iostream>
using namespace std;

struct Point {
    int x = 0; // It is Considered as Default Arguments and no Error is Raised
    int y = 1;
};

int main()
{
    struct Point p1;

    // Accessing members of point p1
    // No value is Initialized then the default value is considered. ie x=0 and y=1;
    cout << ""x = "" << p1.x << "", y = "" << p1.y<<endl;
  
    // Initializing the value of y = 20;
    p1.y = 20;
    cout << ""x = "" << p1.x << "", y = "" << p1.y;
    return 0;
}
// This code is contributed by Samyak Jain",Intermediate
"#include <iostream>
using namespace std;

struct Point {
    int x, y;
};

int main()
{
    struct Point p1 = { 0, 1 };

    // Accessing members of point p1
    p1.x = 20;
    cout << ""x = "" << p1.x << "", y = "" << p1.y;

    return 0;
}",Intermediate
"#include <iostream>
using namespace std;

struct Point {
    int x, y;
};

int main()
{
    // Create an array of structures
    struct Point arr[10];

    // Access array members
    arr[0].x = 10;
    arr[0].y = 20;

    cout << arr[0].x << "" "" << arr[0].y;
    return 0;
}",Intermediate
"#include <iostream>
using namespace std;

struct Point {
    int x, y;
};

int main()
{
    struct Point p1 = { 1, 2 };

    // p2 is a pointer to structure p1
    struct Point* p2 = &p1;

    // Accessing structure members using
    // structure pointer
    cout << p2->x << "" "" << p2->y;
    return 0;
}",Intermediate
"// C++ code to demonstrate array decay
#include <iostream>
using namespace std;

// Driver function to show Array decay
// Passing array by value
void aDecay(int* p)
{
    // Printing size of pointer
    cout << ""Modified size of array is by ""
            "" passing by value: "";
    cout << sizeof(p) << endl;
}

int main()
{
    int a[7] = {
        1, 2, 3, 4, 5, 6, 7,
    };

    // Printing original size of array
    cout << ""Actual size of array is: "";
    cout << sizeof(a) << endl;

    // Passing a pointer to array
    aDecay(a);

    return 0;
}",Intermediate
"// C++ code to demonstrate prevention of
// decay of array
#include<iostream>
using namespace std;

// A function that prevents Array decay
// by passing array by reference
void fun(int (&p)[7])
{
    // Printing size of array
    cout << ""Modified size of array by ""
            ""passing by reference: "";
    cout << sizeof(p) << endl;
}

int main()
{
    int a[7] = {1, 2, 3, 4, 5, 6, 7,};

    // Printing original size of array
    cout << ""Actual size of array is: "";
    cout << sizeof(a) <<endl;

    // Calling function by reference
    fun(a);

    return 0;
}",Intermediate
"// C++ code to demonstrate array decay
#include <iostream>
using namespace std;

// Function to show that array decay happens
// even if we use pointer
void pDecay(int (*p)[7])
{
    // Printing size of array
    cout << ""Modified size of array by ""
            ""passing by pointer: "";
    cout << sizeof(p) << endl;
}

int main()
{
    int a[7] = { 1, 2, 3, 4, 5, 6, 7 };

    // Printing original size of array
    cout << ""Actual size of array is: "";
    cout << sizeof(a) << endl;

    // Passing a pointer to array
    pDecay(&a);

    return 0;
}",Intermediate
"// C++ Program to demonstrate strings
#include <iostream>
using namespace std;

int main()
{

    char s[] = ""GeeksforGeeks"";
    cout << s << endl;
    return 0;
}",Intermediate
"// C++ program to create std::string objects
#include <iostream>
using namespace std;

int main()
{

    string str(""GeeksforGeeks"");
    cout << str;
    return 0;
}",Intermediate
"#include <iostream>
using namespace std;

int main()
{
    string str(5, 'g');
    cout << str;
    return 0;
}",Intermediate
"// C++ Program to demonstrate use of string keyword
#include <iostream>
using namespace std;

int main()
{

    string s = ""GeeksforGeeks"";
    string str(""GeeksforGeeks"");

    cout << ""s = "" << s << endl;
    cout << ""str = "" << str << endl;

    return 0;
}",Intermediate
"// C++ Program to demonstrate C-style string declaration
#include <iostream>
using namespace std;

int main()
{

    char s1[] = { 'g', 'f', 'g', '\0' };
    char s2[4] = { 'g', 'f', 'g', '\0' };
    char s3[4] = ""gfg"";
    char s4[] = ""gfg"";

    cout << ""s1 = "" << s1 << endl;
    cout << ""s2 = "" << s2 << endl;
    cout << ""s3 = "" << s3 << endl;
    cout << ""s4 = "" << s4 << endl;

    return 0;
}",Intermediate
"#include <iostream>
using namespace std;

int main()
{
    string S = ""Geeeks for Geeks"";
    cout << ""Your string is= "";
    cout << S << endl;

    return 0;
}",Intermediate
"// C++ Program to demonstrate string input using cin
#include <iostream>
using namespace std;

int main() {

      string s;
      
    cout<<""Enter String""<<endl;
      cin>>s;
  
      cout<<""String is: ""<<s<<endl;
    return 0;
}",Intermediate
"// C++ Program to demonstrate use of getline function
#include <iostream>
using namespace std;

int main()
{

    string s;
    cout << ""Enter String"" << endl;
    getline(cin, s);
    cout << ""String is: "" << s << endl;
    return 0;
}",Intermediate
"// C++ Program to demonstrate use of stringstream object
#include <iostream>
#include <sstream>
#include<string>

using namespace std;

int main()
{

    string s = "" GeeksforGeeks to the Moon "";
    stringstream obj(s);
    // string to store words individually
    string temp;
    // >> operator will read from the stringstream object
    while (obj >> temp) {
        cout << temp << endl;
    }
    return 0;
}",Intermediate
"// C++ Program to print string using function
#include <iostream>
using namespace std;

void print_string(string s)
{
    cout << ""Passed String is: "" << s << endl;
    return;
}

int main()
{

    string s = ""GeeksforGeeks"";
    print_string(s);

    return 0;
}",Intermediate
"// C++ Program to print string using pointers
#include <iostream>
using namespace std;

int main()
{

    string s = ""Geeksforgeeks"";

    // pointer variable declared to store the starting
    // address of the string
    char* p = &s[0];

    // this loop will execute and print the character till
    // the character value is null this loop will execute and
    // print the characters

    while (*p != '\0') {
        cout << *p;
        p++;
    }
    cout << endl;

    return 0;
}",Intermediate
"// C++ Program to demonstrate string iterator functions
#include <iostream>
using namespace std;

int main()
{
    // declaring an iterator
    string::iterator itr;

    // declaring a reverse iterator
    string::reverse_iterator rit;

    string s = ""GeeksforGeeks"";

    itr = s.begin();
  
    cout << ""Pointing to the start of the string: "" << *itr<< endl;

    itr = s.end() - 1;

    cout << ""Pointing to the end of the string: "" << *itr << endl;

    rit = s.rbegin();
    cout << ""Pointing to the last character of the string: "" << *rit << endl;

    rit = s.rend() - 1;
    cout << ""Pointing to the first character of the string: "" << *rit << endl;

    return 0;
}",Intermediate
"#include <iostream>
using namespace std;

int main()
{

    string s = ""GeeksforGeeks"";
  
      // length function is used to print the length of the string
    cout << ""The length of the string is "" << s.length() << endl;
      
      // capacity function is used to print the capacity of the string
    cout << ""The capacity of string is "" << s.capacity()<< endl;
    
    // the string.resize() function is used to resize the string to 10 characters
      s.resize(10);
  
    cout << ""The string after using resize function is "" << s << endl;
      
      s.resize(20);
    
    cout << ""The capacity of string before using shrink_to_fit function is ""<< s.capacity() << endl;
    
      // shrink to fit function is used to reduce the capacity of the container
    s.shrink_to_fit();

    cout << ""The capacity of string after using shrink_to_fit function is ""<< s.capacity() << endl;

    return 0;
}",Intermediate
"//  C++ Program to Illustrate How to Access Array Elements
#include <iostream>
using namespace std;

int main()
{

    int arr[3];

    // Inserting elements in an array
    arr[0] = 10;
    arr[1] = 20;
    arr[2] = 30;

    // Accessing and printing elements of the array
    cout << ""arr[0]: "" << arr[0] << endl;
    cout << ""arr[1]: "" << arr[1] << endl;
    cout << ""arr[2]: "" << arr[2] << endl;

    return 0;
}",Intermediate
"// C++ Program to Illustrate How to Traverse an Array
#include <iostream>
using namespace std;

int main()
{

    // Initialize the array
    int table_of_two[10]
        = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };

    // Traverse the array using for loop
    for (int i = 0; i < 10; i++) {
        // Print the array elements using indexing
        cout << table_of_two[i] << "" "";
    }

    return 0;
}",Intermediate
"// C++ Program to Illustrate How to Find the Size of an
// Array
#include <iostream>
using namespace std;

int main()
{
    int arr[] = { 1, 2, 3, 4, 5 };

    // Size of one element of an array
    cout << ""Size of arr[0]: "" << sizeof(arr[0]) << endl;

    // Size of array 'arr'
    cout << ""Size of arr: "" << sizeof(arr) << endl;

    // Length of an array
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << ""Length of an array: "" << n << endl;

    return 0;
}",Intermediate
"// C++ Program to Illustrate that Array Name is a Pointer
// that Points to First Element of the Array
#include <iostream>
using namespace std;

int main()
{
    // Defining an array
    int arr[] = { 1, 2, 3, 4 };

    // Define a pointer
    int* ptr = arr;

    // Printing address of the arrary using array name
    cout << ""Memory address of arr: "" << &arr << endl;

    // Printing address of the array using ptr
    cout << ""Memory address of arr: "" << ptr << endl;

    return 0;
}",Intermediate
"// C++ Program to Print Array Elements without Indexing
#include <iostream>
using namespace std;

int main()
{

    // Define an array
    int arr[] = { 11, 22, 33, 44 };

    // Print elements of an array
    cout << ""first element: "" << *arr << endl;
    cout << ""Second element: "" << *(arr + 1) << endl;
    cout << ""Third element: "" << *(arr + 2) << endl;
    cout << ""fourth element: "" << *(arr + 3) << endl;

    return 0;
}",Intermediate
"#include <iostream>
using namespace std;

// passing array as a sized array argument
void printArraySized(int arr[3], int n)
{
    cout << ""Array as Sized Array Argument: "";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << "" "";
    }
    cout << endl;
}

// passing array as an unsized array argument
void printArrayUnsized(int arr[], int n)
{
    cout << ""Array as Unsized Array Argument: "";
    for (int i = 0; i < n; i++) {
        cout << *(arr + i) << "" "";
    }
    cout << endl;
}

// Passing array as a pointer argument
void printArrayPointer(int* ptr, int n)
{
    // Print array elements using pointer ptr
    // that store the address of array passed
    cout << ""Array as Pointer Argument: "";
    for (int i = 0; i < n; i++) {
        cout << ptr[i] << "" "";
    }
}

// driver code
int main()
{

    int arr[] = { 10, 20, 30 };

    // Call function printArray and pass
    // array and its size to it.
    printArraySized(arr, 3);
    printArrayUnsized(arr, 3);
    printArrayPointer(arr, 3);

    return 0;
}",Intermediate
"// c++ program to illustrate the two dimensional array
#include <iostream>
using namespace std;

int main()
{
    // Declaring 2D array
    int arr[4][4];

    // Initialize 2D array using loop
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            arr[i][j] = i + j;
        }
    }

    // Printing the element of 2D array
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            cout << arr[i][j] << "" "";
        }
        cout << endl;
    }

    return 0;
}",Intermediate
"// C++ program to illustrate the 3d array
#include <iostream>
using namespace std;

int main()
{

    // declaring 3d array
    int arr[3][3][3];
    // initializing the array
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            for (int k = 0; k < 3; k++) {
                arr[i][j][k] = i + j + k;
            }
        }
    }

    // printing the array
    for (int i = 0; i < 3; i++) {
        cout << i << ""st layer:"" << endl;
        for (int j = 0; j < 3; j++) {
            for (int k = 0; k < 3; k++) {
                cout << arr[i][j][k] << "" "";
            }
            cout << endl;
        }
        cout << endl;
    }

    return 0;
}",Intermediate
"#include <stdio.h>
#include <stdlib.h>

int main()
{

    // This pointer will hold the
    // base address of the block created
    int* ptr;
    int n, i;

    // Get the number of elements for the array
    printf(""Enter number of elements:"");
    scanf(""%d"",&n);
    printf(""Entered number of elements: %d\n"", n);

    // Dynamically allocate memory using malloc()
    ptr = (int*)malloc(n * sizeof(int));

    // Check if the memory has been successfully
    // allocated by malloc or not
    if (ptr == NULL) {
        printf(""Memory not allocated.\n"");
        exit(0);
    }
    else {

        // Memory has been successfully allocated
        printf(""Memory successfully allocated using malloc.\n"");

        // Get the elements of the array
        for (i = 0; i < n; ++i) {
            ptr[i] = i + 1;
        }

        // Print the elements of the array
        printf(""The elements of the array are: "");
        for (i = 0; i < n; ++i) {
            printf(""%d, "", ptr[i]);
        }
    }

    return 0;
}",Intermediate
"#include <stdio.h>
#include <stdlib.h>

int main()
{

    // This pointer will hold the
    // base address of the block created
    int* ptr;
    int n, i;

    // Get the number of elements for the array
    n = 5;
    printf(""Enter number of elements: %d\n"", n);

    // Dynamically allocate memory using calloc()
    ptr = (int*)calloc(n, sizeof(int));

    // Check if the memory has been successfully
    // allocated by calloc or not
    if (ptr == NULL) {
        printf(""Memory not allocated.\n"");
        exit(0);
    }
    else {

        // Memory has been successfully allocated
        printf(""Memory successfully allocated using calloc.\n"");

        // Get the elements of the array
        for (i = 0; i < n; ++i) {
            ptr[i] = i + 1;
        }

        // Print the elements of the array
        printf(""The elements of the array are: "");
        for (i = 0; i < n; ++i) {
            printf(""%d, "", ptr[i]);
        }
    }

    return 0;
}",Intermediate
"#include <stdio.h>
#include <stdlib.h>

int main()
{

    // This pointer will hold the
    // base address of the block created
    int *ptr, *ptr1;
    int n, i;

    // Get the number of elements for the array
    n = 5;
    printf(""Enter number of elements: %d\n"", n);

    // Dynamically allocate memory using malloc()
    ptr = (int*)malloc(n * sizeof(int));

    // Dynamically allocate memory using calloc()
    ptr1 = (int*)calloc(n, sizeof(int));

    // Check if the memory has been successfully
    // allocated by malloc or not
    if (ptr == NULL || ptr1 == NULL) {
        printf(""Memory not allocated.\n"");
        exit(0);
    }
    else {

        // Memory has been successfully allocated
        printf(""Memory successfully allocated using malloc.\n"");

        // Free the memory
        free(ptr);
        printf(""Malloc Memory successfully freed.\n"");

        // Memory has been successfully allocated
        printf(""\nMemory successfully allocated using calloc.\n"");

        // Free the memory
        free(ptr1);
        printf(""Calloc Memory successfully freed.\n"");
    }

    return 0;
}",Intermediate
"#include <stdio.h>
#include <stdlib.h>

int main()
{

    // This pointer will hold the
    // base address of the block created
    int* ptr;
    int n, i;

    // Get the number of elements for the array
    n = 5;
    printf(""Enter number of elements: %d\n"", n);

    // Dynamically allocate memory using calloc()
    ptr = (int*)calloc(n, sizeof(int));

    // Check if the memory has been successfully
    // allocated by malloc or not
    if (ptr == NULL) {
        printf(""Memory not allocated.\n"");
        exit(0);
    }
    else {

        // Memory has been successfully allocated
        printf(""Memory successfully allocated using calloc.\n"");

        // Get the elements of the array
        for (i = 0; i < n; ++i) {
            ptr[i] = i + 1;
        }

        // Print the elements of the array
        printf(""The elements of the array are: "");
        for (i = 0; i < n; ++i) {
            printf(""%d, "", ptr[i]);
        }

        // Get the new size for the array
        n = 10;
        printf(""\n\nEnter the new size of the array: %d\n"", n);

        // Dynamically re-allocate memory using realloc()
        ptr = (int*)realloc(ptr, n * sizeof(int));
      
          if (ptr == NULL) {
          printf(""Reallocation Failed\n"");
          exit(0);
        }

        // Memory has been successfully allocated
        printf(""Memory successfully re-allocated using realloc.\n"");

        // Get the new elements of the array
        for (i = 5; i < n; ++i) {
            ptr[i] = i + 1;
        }

        // Print the elements of the array
        printf(""The elements of the array are: "");
        for (i = 0; i < n; ++i) {
            printf(""%d, "", ptr[i]);
        }

        free(ptr);
    }

    return 0;
}",Intermediate
"#include <stdio.h>
#include <stdlib.h>
int main()
{
    int index = 0, i = 0, n,
        *marks; // this marks pointer hold the base address
                // of  the block created
    int ans;
    marks = (int*)malloc(sizeof(
        int)); // dynamically allocate memory using malloc
    // check if the memory is successfully allocated by
    // malloc or not?
    if (marks == NULL) {
        printf(""memory cannot be allocated"");
    }
    else {
        // memory has successfully allocated
        printf(""Memory has been successfully allocated by ""
               ""using malloc\n"");
        printf(""\n marks = %pc\n"",
               marks); // print the base or beginning
                       // address of allocated memory
        do {
            printf(""\n Enter Marks\n"");
            scanf(""%d"", &marks[index]); // Get the marks
            printf(""would you like to add more(1/0): "");
            scanf(""%d"", &ans);

            if (ans == 1) {
                index++;
                marks = (int*)realloc(
                    marks,
                    (index + 1)
                        * sizeof(
                            int)); // Dynamically reallocate
                                   // memory by using realloc
                // check if the memory is successfully
                // allocated by realloc or not?
                if (marks == NULL) {
                    printf(""memory cannot be allocated"");
                }
                else {
                    printf(""Memory has been successfully ""
                           ""reallocated using realloc:\n"");
                    printf(
                        ""\n base address of marks are:%pc"",
                        marks); ////print the base or
                                ///beginning address of
                                ///allocated memory
                }
            }
        } while (ans == 1);
        // print the marks of the students
        for (i = 0; i <= index; i++) {
            printf(""marks of students %d are: %d\n "", i,
                   marks[i]);
        }
        free(marks);
    }
    return 0;
}",Intermediate
"#include <iostream>
using namespace std;
class temp{
     int a;
  int b;
  public:
  int solve(int input){
    a=input;
    b=a/2;
    return b;
  }
};

int main() {
  int n;
  cin>>n;
  temp half;
  int ans=half.solve(n);
  cout<<ans<<endl;
   
}",Advanced
"#include <iostream>
#include <string>

using namespace std;

class Person {
  private:
    string name;
    int age;
  public:
    Person(string name, int age) {
      this->name = name;
      this->age = age;
    }
    void setName(string name) {
      this->name = name;
    }
    string getName() {
      return name;
    }
    void setAge(int age) {
      this->age = age;
    }
    int getAge() {
      return age;
    }
};

int main() {
  Person person(""John Doe"", 30);

  cout << ""Name: "" << person.getName() << endl;
  cout << ""Age: "" << person.getAge() << endl;

  person.setName(""Jane Doe"");
  person.setAge(32);

  cout << ""Name: "" << person.getName() << endl;
  cout << ""Age: "" << person.getAge() << endl;

  return 0;
}",Advanced
"// C++ program to demonstrate
// Encapsulation
#include <iostream>
using namespace std;

class Encapsulation {
private:
    // Data hidden from outside world
    int x;

public:
    // Function to set value of
    // variable x
    void set(int a) { x = a; }

    // Function to return value of
    // variable x
    int get() { return x; }
};

// Driver code
int main()
{
    Encapsulation obj;
    obj.set(5);
    cout << obj.get();
    return 0;
}",Advanced
"#include <iostream>
using namespace std;

// declaring class
class Circle {
    // access modifier
private:
    // Data Member
    float area;
    float radius;

public:
    void getRadius()
    {
        cout << ""Enter radius\n"";
        cin >> radius;
    }
    void findArea()
    {
        area = 3.14 * radius * radius;
        cout << ""Area of circle="" << area;
    }
};
int main()
{
    // creating instance(object) of class
    Circle cir;
    cir.getRadius(); // calling function
    cir.findArea(); // calling function
}",Advanced
"// Program C++ do zademonstrowania
// przeciążanie funkcji lub
// Polimorfizm w czasie kompilacji
#include <bits/stdc++.h>

używając  przestrzeni nazw  std ;
klasa  Geeks {
publiczny :
    // Funkcja z 1 parametrem int
    pusta  funkcja ( int  x )
    {
        cout  <<  ""wartość x wynosi ""  <<  x  <<  endl ;
    }

    // Funkcja o tej samej nazwie, ale
    // 1 podwójny parametr
     funkcja void ( double  x )
    {
        cout  <<  ""wartość x wynosi ""  <<  x  <<  endl ;
    }

    // Funkcja o tej samej nazwie i
    // 2 parametry int
    pusta  funkcja ( int  x , int  y )
    {
        cout  <<  ""wartość x i y wynosi ""  <<  x  <<  "", ""  <<  y
             <<  koniec ;
    }
};

// Kod sterownika
int  główny ()
{
    Geeks  obj1 ;

    // Function being called depends
    // on the parameters passed
    // func() is called with int value
    obj1.func(7);

    // func() is called with double value
    obj1.func(9.132);

    // func() is called with 2 int values
    obj1.func(85, 64);
    return 0;
}",Advanced
"// C++ program to demonstrate
// Operator Overloading or
// Compile-Time Polymorphism
#include <iostream>
using namespace std;

class Complex {
private:
    int real, imag;

public:
    Complex(int r = 0, int i = 0)
    {
        real = r;
        imag = i;
    }

    // This is automatically called
    // when '+' is used with between
    // two Complex objects
    Complex operator+(Complex const& obj)
    {
        Complex res;
        res.real = real + obj.real;
        res.imag = imag + obj.imag;
        return res;
    }
    void print() { cout << real << "" + i"" << imag << endl; }
};

// Driver code
int main()
{
    Complex c1(10, 5), c2(2, 4);

    // An example call to ""operator+""
    Complex c3 = c1 + c2;
    c3.print();
}",Advanced
"// C++ program for function overriding with data members
#include <bits/stdc++.h>
using namespace std;

//  base class declaration.
class Animal {
public:
    string color = ""Black"";
};

// inheriting Animal class.
class Dog : public Animal {
public:
    string color = ""Grey"";
};

// Driver code
int main(void)
{
    Animal d = Dog(); // accessing the field by reference
                      // variable which refers to derived
    cout << d.color;
}",Advanced
"// C++ Program to demonstrate
// the Virtual Function
#include <iostream>
using namespace std;

// Declaring a Base class
class GFG_Base {

public:
    // virtual function
    virtual void display()
    {
        cout << ""Called virtual Base Class function""
             << ""\n\n"";
    }

    void print()
    {
        cout << ""Called GFG_Base print function""
             << ""\n\n"";
    }
};

// Declaring a Child Class
class GFG_Child : public GFG_Base {

public:
    void display()
    {
        cout << ""Called GFG_Child Display Function""
             << ""\n\n"";
    }

    void print()
    {
        cout << ""Called GFG_Child print Function""
             << ""\n\n"";
    }
};

int main()
{
    // Create a reference of class GFG_Base
    GFG_Base* base;

    GFG_Child child;

    base = &child;

    // This will call the virtual function
    base->display();

    // This will call the non-virtual function
    base->print();
}",Advanced
"// C++ program for virtual function overriding
#include <bits/stdc++.h>
using namespace std;

class base {
public:
    virtual void print()
    {
        cout << ""print base class"" << endl;
    }

    void show() { cout << ""show base class"" << endl; }
};

class derived : public base {
public:
    // print () is already virtual function in
    // derived class, we could also declared as
    // virtual void print () explicitly
    void print() { cout << ""print derived class"" << endl; }

    void show() { cout << ""show derived class"" << endl; }
};

// Driver code
int main()
{
    base* bptr;
    derived d;
    bptr = &d;

    // Virtual function, binded at
    // runtime (Runtime polymorphism)
    bptr->print();

    // Non-virtual function, binded
    // at compile time
    bptr->show();

    return 0;
}",Advanced
"#include <iostream>
using namespace std;


void add(int a, int b)
{
  cout << ""sum = "" << (a + b);
}

void add(double a, double b)
{
    cout << endl << ""sum = "" << (a + b);
}

// Driver code
int main()
{
    add(10, 2);
    add(5.3, 6.2);

    return 0;
}",Advanced
"#include <iostream>
using namespace std;

void add(int a, int b)
{
  cout << ""sum = "" << (a + b);
}

void add(int a, int b, int c)
{
    cout << endl << ""sum = "" << (a + b + c);
}

// Driver code
int main()
{
    add(10, 2);
    add(5, 6, 4);

    return 0;
}",Advanced
"#include<iostream>
using namespace std;

void add(int a, double b)
{ 
    cout<<""sum = ""<<(a+b);
}  

void  add(double a, int b)
{
    cout<<endl<<""sum = ""<<(a+b);
}  

// Driver code
int main()
{
    add(10,2.5);
    add(5.5,6);

      return 0;
}",Advanced
"#include <iostream>
using namespace std;

void print(int i) {
  cout << "" Here is int "" << i << endl;
}
void print(double  f) {
  cout << "" Here is float "" << f << endl;
}
void print(char const *c) {
  cout << "" Here is char* "" << c << endl;
}

int main() {
  print(10);
  print(10.10);
  print(""ten"");
  return 0;
}",Advanced
"#include<iostream>
using namespace std;

void add(int a, int b)
{
    cout<<""sum =""<<(a+b);
}  

void  add(int a, int b,int c)
{
    cout<<endl<<""sum =""<<(a+b+c);
}  


main()
{

    add(10,2);
    add(5,6,4);
    return 0;
}",Advanced
"#include<iostream>
using namespace std;

void add(int a, double b)
{
    cout<<""sum =""<<(a+b);
}  
void  add(double a, int b)
{
    cout<<endl<<""sum =""<<(a+b);
}  

main()
{
    add(10,2.5);
    add(5.5,6);
    return 0;
           }",Advanced
"// C++ Program to Demonstrate
// Operator Overloading
#include <iostream>
using namespace std;

class Complex {
private:
    int real, imag;

public:
    Complex(int r = 0, int i = 0)
    {
        real = r;
        imag = i;
    }

    // This is automatically called when '+' is used with
    // between two Complex objects
    Complex operator+(Complex const& obj)
    {
        Complex res;
        res.real = real + obj.real;
        res.imag = imag + obj.imag;
        return res;
    }
    void print() { cout << real << "" + i"" << imag << '\n'; }
};

int main()
{
    Complex c1(10, 5), c2(2, 4);
    Complex c3 = c1 + c2;
    c3.print();
}",Advanced
"#include <iostream>
using namespace std;
class Complex {
private:
    int real, imag;

public:
    Complex(int r = 0, int i = 0)
    {
        real = r;
        imag = i;
    }
    void print() { cout << real << "" + i"" << imag << endl; }
    // The global operator function is made friend of this
    // class so that it can access private members
    friend Complex operator+(Complex const& c1,
                             Complex const& c2);
};
Complex operator+(Complex const& c1, Complex const& c2)
{
    return Complex(c1.real + c2.real, c1.imag + c2.imag);
}
int main()
{
    Complex c1(10, 5), c2(2, 4);
    Complex c3
        = c1
          + c2; // An example call to &quot;operator+&quot;
    c3.print();
    return 0;
}",Advanced
"// C++ program to demonstrate operator overloading
// using dot operator
#include <iostream>
using namespace std;

class ComplexNumber {
private:
    int real;
    int imaginary;

public:
    ComplexNumber(int real, int imaginary)
    {
        this->real = real;
        this->imaginary = imaginary;
    }
    void print() { cout << real << "" + i"" << imaginary; }
    ComplexNumber operator+(ComplexNumber c2)
    {
        ComplexNumber c3(0, 0);
        c3.real = this->real + c2.real;
        c3.imaginary = this->imaginary + c2.imaginary;
        return c3;
    }
};
int main()
{
    ComplexNumber c1(3, 5);
    ComplexNumber c2(2, 4);
    ComplexNumber c3 = c1 + c2;
    c3.print();
    return 0;
}",Advanced
"// C++ Program to Demonstrate the working
// of conversion operator
#include <iostream>
using namespace std;
class Fraction {
private:
    int num, den;

public:
    Fraction(int n, int d)
    {
        num = n;
        den = d;
    }

    // Conversion operator: return float value of fraction
    operator float() const
    {
        return float(num) / float(den);
    }
};

int main()
{
    Fraction f(2, 5);
    float val = f;
    cout << val << '\n';
    return 0;
}",Advanced
"// C++ program to demonstrate can also be used for implicit
// conversion to the class being constructed
#include <iostream>
using namespace std;

class Point {
private:
    int x, y;

public:
    Point(int i = 0, int j = 0)
    {
        x = i;
        y = j;
    }
    void print()
    {
        cout << ""x = "" << x << "", y = "" << y << '\n';
    }
};

int main()
{
    Point t(20, 20);
    t.print();
    t = 30; // Member x of t becomes 30
    t.print();
    return 0;
}",Advanced
"// C Program to illustrate the macro
#include <stdio.h>

// macro definition
#define LIMIT 5

int main()
{
    for (int i = 0; i < LIMIT; i++) {
        printf(""%d \n"", i);
    }

    return 0;
}",Advanced
"// C Program to illustrate function like macros
#include <stdio.h>

// macro with parameter
#define AREA(l, b) (l * b)

int main()
{
    int l1 = 10, l2 = 5, area;

    area = AREA(l1, l2);

    printf(""Area of rectangle is: %d"", area);

    return 0;
}",Advanced
"//program to demonstrates the use of #if, #elif, #else,
// and #endif  preprocessor directives.
#include <stdio.h>

// defining PI
#define PI 3.14159

int main()
{
  
#ifdef PI
    printf(""PI is defined\n"");
  
#elif defined(SQUARE)
    printf(""Square is defined\n"");
#else
    #error ""Neither PI nor SQUARE is defined""
#endif
  
#ifndef SQUARE
    printf(""Square is not defined""); 
#else
    cout << ""Square is defined"" << endl;
#endif

    return 0;
}",Advanced
"#include <stdio.h>

// defining MIN_VALUE

#define MIN_VALUE 10

int main() {
    // Undefining and redefining MIN_VALUE
printf(""Min value is: %d\n"",MIN_VALUE);
  
//undefining max value   
#undef MIN_VALUE
  
// again redefining MIN_VALUE  
#define MIN_VALUE 20

    printf(""Min value after undef and again redefining it: %d\n"", MIN_VALUE);

    return 0;
}",Advanced
"// C program to illustrate the #pragma exit and pragma
// startup
#include <stdio.h>

void func1();
void func2();

// specifying funct1 to execute at start
#pragma startup func1
// specifying funct2 to execute before end
#pragma exit func2

void func1() { printf(""Inside func1()\n""); }

void func2() { printf(""Inside func2()\n""); }

// driver code
int main()
{
    void func1();
    void func2();
    printf(""Inside main()\n"");

    return 0;
}",Advanced
"#include <stdio.h>

void func1();
void func2();

void __attribute__((constructor)) func1();
void __attribute__((destructor)) func2();

void func1()
{
    printf(""Inside func1()\n"");
}

void func2()
{
    printf(""Inside func2()\n"");
}

int main()
{
    printf(""Inside main()\n"");

    return 0;
}",Advanced
